<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   xmlns:xlink="http://www.w3.org/1999/xlink"
   xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd"
   xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape"
   width="303mm"
   height="303mm"
   viewBox="0 0 303 303"
   version="1.1"
   id="svg8"
   inkscape:version="1.0 (4035a4fb49, 2020-05-01)"
   sodipodi:docname="favico.svg">
  <defs
     id="defs2">
    <linearGradient
       inkscape:collect="always"
       id="linearGradient1248">
      <stop
         style="stop-color:#0055d4;stop-opacity:1"
         offset="0"
         id="stop1244" />
      <stop
         style="stop-color:#00ffff;stop-opacity:1"
         offset="1"
         id="stop1246" />
    </linearGradient>
    <linearGradient
       inkscape:collect="always"
       id="linearGradient1224">
      <stop
         style="stop-color:#0055d4;stop-opacity:1"
         offset="0"
         id="stop1220" />
      <stop
         style="stop-color:#00ffff;stop-opacity:1"
         offset="1"
         id="stop1222" />
    </linearGradient>
    <linearGradient
       inkscape:collect="always"
       xlink:href="#linearGradient1224"
       id="linearGradient1226"
       x1="591.88452"
       y1="928.01184"
       x2="1091.9712"
       y2="6.5737972"
       gradientUnits="userSpaceOnUse"
       gradientTransform="translate(19.692305,-2.6721311)" />
    <linearGradient
       inkscape:collect="always"
       xlink:href="#linearGradient1224"
       id="linearGradient1234"
       x1="165.49635"
       y1="-3.4804187"
       x2="127.84029"
       y2="307.21201"
       gradientUnits="userSpaceOnUse" />
    <linearGradient
       inkscape:collect="always"
       xlink:href="#linearGradient1248"
       id="linearGradient1250"
       x1="1111.54"
       y1="459.12213"
       x2="625.49805"
       y2="1161.1163"
       gradientUnits="userSpaceOnUse"
       gradientTransform="translate(-34.855132,5.2092495)" />
  </defs>
  <sodipodi:namedview
     id="base"
     pagecolor="#ffffff"
     bordercolor="#666666"
     borderopacity="1.0"
     inkscape:pageopacity="0.0"
     inkscape:pageshadow="2"
     inkscape:zoom="0.24748737"
     inkscape:cx="950.77046"
     inkscape:cy="599.51098"
     inkscape:document-units="mm"
     inkscape:current-layer="layer1"
     inkscape:document-rotation="0"
     showgrid="false"
     inkscape:window-width="1366"
     inkscape:window-height="705"
     inkscape:window-x="-8"
     inkscape:window-y="-8"
     inkscape:window-maximized="1"
     inkscape:snap-center="true"
     inkscape:lockguides="false" />
  <metadata
     id="metadata5">
    <rdf:RDF>
      <cc:Work
         rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type
           rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
        <dc:title />
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1">
    <g
       id="g1164"
       style="fill:#000080"
       transform="translate(9.2220868,-1.3782806)">
      <path
         d="m 719.33398,29.375 c -0.0453,1.254915 -0.16908,2.545644 -0.4121,3.880859 -0.44438,3.343178 -0.62708,6.770938 0.43554,10.021485 6.32496,0.785303 13.56077,2.32529 18.125,2.52539 1.62705,0.07133 2.57839,2.107662 3.38672,3.521485 2.69998,4.722342 5.29603,9.569127 7.04297,14.720703 0.57755,1.702894 0.38189,3.55084 0.31055,5.375 1.29288,0.98188 2.62428,2.118341 3.93164,3.355469 1.12122,-0.0052 2.24135,0.02688 3.36132,0.09766 -0.47156,-1.244941 -0.48467,-2.325449 0.5586,-3.023438 1.55245,-1.038653 2.39843,1.038796 3.15625,3.480469 1.13169,0.632181 2.11393,3.396756 2.93164,6.982422 2.56428,4.57721 5.03422,9.209186 7.74414,13.701172 4.05628,6.723734 7.04469,11.401834 9.5625,15.300774 0.39294,-0.0761 0.79857,-0.20724 1.13477,-0.0273 2.63028,1.4076 4.97546,3.29616 7.51757,4.85742 1.0012,0.6149 -1.92703,-1.34527 -2.89062,-2.01758 8.51966,3.7885 13.05441,12.64584 20.22265,18.01758 0.64748,0.48529 1.66333,-0.25349 2.42774,0.0117 6.97531,2.42001 13.54215,5.88718 20.30664,8.8457 11.74341,8.64559 23.24227,18.60611 32.25391,30.21094 8.19972,11.97837 3.94305,6.25562 12.7207,17.20313 14.34482,15.93043 -1.80101,-2.66813 16.18164,21.35546 4.56435,6.09765 10.21761,11.32196 14.86133,17.35938 6.29348,8.18234 8.88615,13.02442 14.23437,21.85742 1.45043,3.26552 9.80533,22.40106 12.03321,26.25195 1.66065,2.87049 4.12753,5.2103 5.88672,8.02149 2.13833,3.41705 3.71945,7.15616 5.77929,10.62109 12.34598,20.76774 -5.84823,-12.42292 7.41602,12.22657 5.19813,4.63635 7.30897,11.56381 10.39258,17.54687 0.71482,1.38695 1.97114,2.50299 2.44921,3.98828 4.01855,12.48521 4.70377,19.1208 6.76758,31.57617 3.05594,19.45111 10.91699,37.89065 10.74805,57.83008 -0.0324,3.82466 -1.48556,14.41209 -2.02539,18.62891 -0.71736,17.41375 -0.71132,34.84738 -0.37305,52.26953 0.14332,7.37726 1.27741,14.28562 -2.70508,21.32226 -2.79518,4.9389 -7.55978,8.46638 -11.33984,12.69922 -4.79564,4.15726 -9.20579,8.67242 -13.36523,13.41211 -0.98,7.24136 -2.60468,13.77508 -5.99219,20.67188 -1.31962,2.68664 -3.30066,5.00913 -4.66016,7.67578 -23.2159,45.53824 10.73532,-16.4509 -19.04883,36.90234 -8.94209,13.91932 -10.77747,19.30859 -24.13867,29.78321 -10.97727,8.60577 -23.89108,13.2757 -37.00976,17.50195 -2.90564,5.25348 -5.93607,10.44294 -9.33985,15.4707 -3.06485,2.72481 -5.90671,5.7257 -9.19531,8.17578 -3.86426,2.87891 -13.15144,8.00353 -17.83008,9.2168 -6.97572,1.80881 -14.39957,0.938 -7.78906,1.55859 0.91287,0.39217 3.23158,0.31338 2.73828,1.17578 -2.19424,3.8363 -5.74153,6.74752 -8.98633,9.74805 -8.36356,7.73401 -18.87134,15.16084 -30.55468,16.70508 -3.55163,0.46942 -7.1572,0.31146 -10.73633,0.4668 -9.85474,-2.29289 -19.59707,-1.52031 -29.59766,-1.31055 -9.90076,0.0756 -23.57297,0.52702 -32.76758,-5.63281 -2.78893,9.04318 -5.22589,17.24926 -7.07031,23.96289 -0.006,0.0207 -0.0119,0.0636 -0.0176,0.0859 0.28797,0.68284 0.58746,1.35437 0.91797,2.0039 0.002,4.02519 -0.005,8.051 -0.004,12.07617 0.29213,1.13623 0.56515,2.2776 0.79493,3.42383 0.96257,4.80129 -0.0521,27.73467 -0.23243,33.19922 -0.25635,2.26593 -0.43007,4.21159 -0.54492,5.96094 0.008,2.86135 0.008,5.72262 0.0234,8.58398 0.008,1.52587 1.53525,4.33208 0.0293,4.57813 -0.0117,0.002 -0.0234,0.004 -0.0352,0.006 0.008,0.20139 0.0139,0.36597 0.0215,0.57226 -1.31728,-0.0227 -2.63623,-0.0232 -3.95507,-0.0234 -8.72761,1.06009 -17.5704,1.03763 -26.39649,1.17187 -2.32874,0.96378 -4.70286,1.36321 -7.10547,0.67773 -0.51144,-0.14591 -0.9933,-0.29394 -1.48047,-0.4414 -0.48148,0.0204 -0.9642,0.0306 -1.44531,0.0547 -0.006,-0.17029 -0.008,-0.33956 -0.0137,-0.50977 -1.55351,-0.5004 -2.95962,-1.01142 -4.25976,-1.53125 -0.0155,1.14767 -0.0249,2.29571 -0.043,3.44336 -0.0179,0.10489 -0.23608,1.24435 -0.38868,2.06641 0.009,0.011 0.02,0.0201 0.0293,0.0312 5.03955,6.03666 0.40642,15.72287 0.60938,23.58398 -1.96257,0.501 -3.92086,1.33314 -5.87891,2.14844 -5.0909,6.33659 -9.58653,13.13318 -14.17383,19.84375 -15.08461,22.06675 -21.82499,33.04047 -35.55273,54.68359 1.83289,3.47932 2.11445,10.56426 0.71289,23.80274 -0.14285,1.34924 -3.7081,2.45731 -7.85156,3.06445 -0.29569,0.14974 -0.2339,0.11574 -0.54883,0.27539 -1.23999,0.22673 -2.46779,0.54136 -3.72071,0.67969 -0.63549,0.0699 -1.29128,-0.18338 -1.91796,-0.0566 -5.48806,1.10864 -10.87538,2.57158 -16.18165,4.29296 -0.0113,0.31135 -0.0163,0.62278 -0.0352,0.9336 -0.18025,2.98269 -5.4779,2.39523 -8.28125,3.42969 -25.23095,9.31048 -5.25757,0.39381 -31.48633,13.24023 -5.01305,2.67689 -9.95492,5.44099 -14.86914,8.21289 1.21715,2.78226 2.1221,6.22092 3.01563,10.1582 0.0569,0.25055 -0.69508,8.33848 -0.78126,9.28321 -0.32733,6.29537 0.0997,12.59796 0.10352,18.89844 -0.0718,5.64747 -0.0582,11.29567 -0.0469,16.94337 0.007,6.1839 0,12.3689 0,18.5528 -8e-5,9.9417 7.1e-4,19.8825 0,29.8242 -8e-5,13.2216 0,26.4424 0,39.6641 v 22.0351 28.791 a 547.14274,574.28561 0 0 0 51.4375,2.5449 A 547.14274,574.28561 0 0 0 1115.7148,581.42773 547.14274,574.28561 0 0 0 719.33398,29.375 Z m 3.5586,21.201172 c 0.59215,1.146849 1.14697,2.308755 1.59765,3.496094 0.50953,0.04778 1.02078,0.0886 1.5293,0.140625 -1.08019,-1.423898 -2.12124,-2.623593 -3.12695,-3.636719 z M 355.77539,157.13281 c -0.0134,0.0969 -0.0237,0.17424 -0.0371,0.27149 -0.003,0.14974 -0.007,0.29947 -0.01,0.44922 0.0154,-0.24025 0.0315,-0.48046 0.0469,-0.72071 z m 100.33008,156.42578 c -0.0653,0.79493 -0.12999,1.58985 -0.19531,2.38477 0.15957,-0.76496 0.31853,-1.53005 0.47851,-2.29492 -0.0962,-0.032 -0.18743,-0.0584 -0.2832,-0.0899 z m -22.54102,100.35352 c 0.15926,0.17217 0.31861,0.34284 0.4668,0.5293 0.56432,0.71005 1.01333,1.45278 1.38281,2.21679 0.1132,-0.74009 0.22784,-1.48154 0.34375,-2.24414 -0.69581,-0.1431 -1.41098,-0.29987 -2.19336,-0.50195 z m -39.26953,15.94141 c -0.10544,0.59483 -0.20717,1.1903 -0.3125,1.78515 0.13982,0.0656 0.27599,0.1353 0.41406,0.20313 -0.0344,-0.67233 -0.0702,-1.37458 -0.10156,-1.98828 z m 278.625,43.46875 c -0.27636,0.2362 -0.53107,0.42106 -0.79297,0.62304 -0.0617,0.27896 -0.1143,0.52672 -0.17578,0.80469 0.31235,-0.0381 0.67453,-0.0798 0.97852,-0.11719 -0.003,-0.44768 -0.007,-0.83808 -0.01,-1.31054 z m 226.96289,59.01953 c -0.005,10e-4 -0.009,0.003 -0.0137,0.004 -6.9e-4,0.006 -10e-4,0.0116 -0.002,0.0176 0.005,-0.007 0.0104,-0.0143 0.0156,-0.0215 z m -274.61328,95.54687 c -0.38509,0.24681 -0.77199,0.4866 -1.1582,0.73047 -0.35986,0.73085 -0.71781,1.46333 -1.08399,2.18945 0.57321,-0.66118 1.1422,-1.26198 1.70704,-1.79101 0.17861,-0.37614 0.35627,-0.75287 0.53515,-1.12891 z m 75.32031,30.59571 c -0.33578,0.86048 -0.54092,1.69913 -0.37109,1.21289 0.13784,-0.39465 0.25809,-0.80113 0.37109,-1.21289 z m -561.72265,72.19921 c -0.0689,0.0785 -0.13891,0.15872 -0.20703,0.23633 -0.13729,0.9705 -0.2748,1.9314 -0.41211,2.90235 0.20214,-1.02716 0.41701,-2.11044 0.61914,-3.13868 z m 486.92578,4.11329 c -9.01183,4.52981 -17.68349,8.8839 -23.76758,11.92968 -0.59402,1.32213 -1.18743,2.64458 -1.78125,3.9668 0.32172,-0.10857 0.64015,-0.22627 0.96289,-0.33203 0.23988,-0.0786 15.28252,-4.82871 24.66602,-4.04492 -0.0287,-3.83974 -0.0542,-7.67982 -0.0801,-11.51953 z m -0.88672,39.62695 c 0.005,-0.0188 -0.10917,0.003 -0.37305,0.082 -1.85596,0.55514 -3.78524,0.81702 -5.71679,1.06641 1.96497,0.45243 6.06094,-1.03825 6.08984,-1.14844 z m 1.16602,0.13476 c -0.77177,1.7252 -1.47842,3.45366 -2.0293,5.19532 -12.70565,6.00707 -25.59101,11.63044 -38.54492,17.10742 1.88672,7.80112 -4.91309,14.75858 -14.58789,20.26562 -3.77021,8.85303 -7.45446,17.74268 -11.08594,26.6543 12.3019,-3.96312 23.46143,-7.40555 41.07031,-12.90625 3.65159,-0.51812 8.72043,-4.31368 11.25195,-2.24219 4.02383,-5.93822 8.01435,-11.91216 12.47657,-17.52148 -0.14712,-1.08173 -0.25402,-2.15277 -0.33399,-3.19531 -0.35437,-4.61965 1.19049,-9.29612 1.90625,-13.8125 -0.0293,-6.51489 -0.0782,-13.0299 -0.12304,-19.54493 z m -130.90625,10.60157 c 0.13287,0.29371 0.26766,0.56337 0.39843,0.90039 0.52235,-0.0588 0.97477,-0.0728 1.38672,-0.0586 -0.0501,-0.13767 -0.10022,-0.30034 -0.15039,-0.43554 -0.58909,-0.12778 -1.11264,-0.26694 -1.63476,-0.40625 z m -57.26758,88.42578 c -0.2127,0.0261 -0.41978,0.034 -0.63086,0.0547 0.20232,1.10299 0.41833,2.2626 0.62304,3.37696 -9.7e-4,-1.13905 0.007,-2.29333 0.008,-3.43164 z m 136.16601,16.91992 c -0.28206,0.0955 -0.41821,0.14246 -0.70117,0.23828 -2.87849,1.28719 -6.26057,2.79054 -8.46289,3.78516 -0.66793,1.22492 -1.37733,2.49824 -2.12891,3.82422 -2.24268,3.9567 -7.73043,4.77282 -11.51757,7.31445 1.9735,-0.36317 3.90928,-0.71351 5.69726,-1.03906 3.31786,-0.0736 6.07744,-0.26733 8.25977,-0.0254 2.2909,-0.65928 4.58829,-1.26558 6.89453,-1.81055 -0.41088,-2.10377 -0.85072,-4.19658 -1.40235,-6.24219 1.30505,-2.33417 2.24353,-4.03318 3.36133,-6.04492 z m 11.625,8.86914 c -0.38377,-0.0315 -1.29597,0.53577 -2.00976,1.17383 1.23003,-0.36165 2.41415,-0.71287 3.51562,-1.02539 -0.5014,-0.0561 -1.00271,-0.10721 -1.50586,-0.14844 z"
         transform="scale(0.26458333)"
         style="opacity:0.995525;fill:url(#linearGradient1250);fill-opacity:1;stroke:#32daff;stroke-width:0.999999;stroke-opacity:0"
         id="path935" />
    </g>
    <path
       id="path952"
       style="opacity:0.995525;fill:#1a1a1a;fill-opacity:1;stroke:#32daff;stroke-width:0.264583;stroke-opacity:0"
       d="m 199.81137,5.371285 c 0.0682,0.5881282 0.0418,1.2251856 -0.0806,1.8975586 -0.11758,0.8845491 -0.16592,1.7914773 0.11523,2.6515178 1.67348,0.2077786 3.58796,0.6152326 4.79558,0.6681766 0.43049,0.01887 0.6822,0.557652 0.89607,0.931726 0.71437,1.249453 1.40124,2.531831 1.86345,3.894852 0.15281,0.450557 0.10104,0.939493 0.0822,1.422135 0.34207,0.25979 0.69434,0.560478 1.04024,0.887802 0.29666,-0.0014 0.59303,0.0071 0.88935,0.02584 -0.12477,-0.329391 -0.12823,-0.615275 0.1478,-0.799951 0.41075,-0.274811 0.63458,0.274848 0.83509,0.920874 0.29943,0.167264 0.55931,0.898725 0.77566,1.847432 0.67847,1.211054 1.33197,2.436597 2.04897,3.625102 1.07323,1.778989 1.86391,3.016736 2.53008,4.048331 0.10397,-0.02014 0.21129,-0.05483 0.30024,-0.0072 0.69593,0.372428 1.31643,0.872109 1.98903,1.285193 0.2649,0.162692 -0.50986,-0.355936 -0.76481,-0.533818 2.25416,1.002374 3.45397,3.345878 5.35057,4.767151 0.17131,0.1284 0.44009,-0.06707 0.64234,0.0031 1.84555,0.640294 3.58303,1.557649 5.3728,2.340424 3.10711,2.287479 6.14952,4.922867 8.53385,7.993312 2.16951,3.169277 1.04326,1.655132 3.36568,4.551661 3.7954,4.214926 -0.47652,-0.705943 4.28139,5.650299 1.20765,1.613336 2.70341,2.995602 3.93206,4.593002 1.66515,2.164911 2.35113,3.446045 3.76618,5.783109 0.38376,0.864002 2.59433,5.926947 3.18379,6.945829 0.43938,0.759483 1.09207,1.378558 1.55753,2.122352 0.56576,0.904095 0.9841,1.893401 1.5291,2.810164 3.26654,5.494797 -1.54734,-3.286898 1.96216,3.234946 1.37533,1.226701 1.93383,3.059591 2.7497,4.642609 0.18913,0.366964 0.52153,0.66225 0.64802,1.055233 1.06324,3.303378 1.24454,5.059045 1.79059,8.354528 0.80855,5.146439 2.88845,10.025235 2.84375,15.300875 -0.009,1.01194 -0.39305,3.8132 -0.53588,4.9289 -0.1898,4.60739 -0.18821,9.22004 -0.0987,13.82965 0.0379,1.9519 0.33798,3.77973 -0.71572,5.64151 -0.73956,1.30675 -2.0002,2.24006 -3.00034,3.36 -1.26884,1.09994 -2.4357,2.29458 -3.53621,3.54862 -0.2593,1.91595 -0.68916,3.64466 -1.58544,5.46944 -0.34915,0.71084 -0.8733,1.32533 -1.233,2.03088 -6.14254,12.04866 2.84039,-4.35263 -5.04,9.76375 -2.36593,3.68282 -2.85154,5.10873 -6.38669,7.88014 -2.9044,2.27694 -6.32118,3.51252 -9.79217,4.63072 -0.76878,1.38998 -1.57058,2.76303 -2.47116,4.09329 -0.81091,0.72094 -1.56282,1.51492 -2.43293,2.16317 -1.02242,0.76172 -3.47965,2.11761 -4.71754,2.43862 -1.84566,0.47858 -3.80989,0.24818 -2.06086,0.41237 0.24153,0.10376 0.85502,0.0829 0.72451,0.31109 -0.58056,1.01503 -1.51912,1.78529 -2.37764,2.57918 -2.21286,2.04629 -4.99304,4.0113 -8.08426,4.41988 -0.9397,0.1242 -1.89367,0.0824 -2.84065,0.12351 -2.6074,-0.60666 -5.18506,-0.40225 -7.83105,-0.34675 -2.61957,0.02 -6.23701,0.13944 -8.66975,-1.49035 -0.73791,2.39268 -1.38269,4.56387 -1.87069,6.34018 -0.002,0.005 -0.003,0.0168 -0.005,0.0227 0.0762,0.18067 0.15544,0.35834 0.24288,0.5302 5.3e-4,1.065 -0.001,2.13016 -0.001,3.19515 0.0773,0.30063 0.14953,0.60262 0.21033,0.90589 0.25468,1.27034 -0.0138,7.33813 -0.0615,8.78396 -0.0678,0.59953 -0.11379,1.11432 -0.14417,1.57717 0.002,0.75706 0.002,1.51411 0.006,2.27117 0.002,0.40372 0.4062,1.1462 0.008,1.2113 -0.003,5.3e-4 -0.006,0.001 -0.009,0.002 0.002,0.0533 0.004,0.0968 0.006,0.15141 -0.34854,-0.006 -0.69751,-0.006 -1.04645,-0.006 -2.30918,0.28048 -4.64884,0.27454 -6.98407,0.31006 -0.61615,0.255 -1.2443,0.36068 -1.87999,0.17931 -0.13532,-0.0386 -0.26281,-0.0778 -0.39171,-0.11679 -0.12739,0.005 -0.25511,0.008 -0.3824,0.0145 -0.002,-0.0451 -0.002,-0.0898 -0.004,-0.13488 -0.41103,-0.1324 -0.78306,-0.2676 -1.12706,-0.40514 -0.004,0.30365 -0.007,0.6074 -0.0114,0.91105 -0.005,0.0278 -0.0625,0.32924 -0.10283,0.54674 0.002,0.003 0.005,0.005 0.008,0.008 1.33338,1.5972 0.10753,4.16001 0.16123,6.23992 -0.51926,0.13256 -1.0374,0.35273 -1.55546,0.56845 -1.34697,1.67655 -2.53644,3.47482 -3.75016,5.25032 -3.99114,5.83849 -5.77453,8.74196 -9.40666,14.46837 0.48495,0.92057 0.55945,2.79512 0.18862,6.29781 -0.0378,0.35698 -0.9811,0.65016 -2.07739,0.8108 -0.0782,0.0396 -0.0619,0.0306 -0.14522,0.0729 -0.32808,0.06 -0.65293,0.14324 -0.98443,0.17984 -0.16814,0.0185 -0.34165,-0.0485 -0.50746,-0.015 -1.45205,0.29333 -2.87745,0.6804 -4.2814,1.13585 -0.003,0.0824 -0.004,0.16477 -0.009,0.24701 -0.0477,0.78917 -1.44936,0.63374 -2.19108,0.90744 -6.67569,2.4634 -1.39107,0.1042 -8.33076,3.50314 -1.32616,0.70815 -2.63359,1.4392 -3.93361,2.17248 0.32202,0.73596 0.561,1.64667 0.79737,2.68821 0.0151,0.0663 -0.18391,2.20622 -0.20671,2.45618 -0.0579,1.11411 -0.0266,2.2289 0.001,3.34398 a 118.30652,131.15772 0 0 0 22.31651,2.35486 118.30652,131.15772 0 0 0 118.307,-131.15789 A 118.30652,131.15772 0 0 0 199.81137,5.371285 Z m 0.96997,6.480225 c 0.15667,0.303437 0.30347,0.610858 0.42271,0.925008 0.13481,0.01264 0.27008,0.02344 0.40463,0.03721 -0.2858,-0.37674 -0.56125,-0.694159 -0.82734,-0.962215 z m -97.13309,28.193109 c -0.004,0.02564 -0.006,0.0461 -0.01,0.07183 -7.9e-4,0.03962 -0.002,0.07923 -0.003,0.118856 0.004,-0.06357 0.008,-0.127121 0.0124,-0.190688 z m 10.19163,72.157351 c -0.0279,0.15738 -0.0551,0.31488 -0.0827,0.47232 0.037,0.0174 0.073,0.0358 0.10956,0.0537 -0.009,-0.17789 -0.0186,-0.36369 -0.0269,-0.52607 z m 73.71953,11.50111 c -0.0731,0.0625 -0.14052,0.1114 -0.20981,0.16484 -0.0163,0.0738 -0.0302,0.13937 -0.0465,0.21291 0.0826,-0.0101 0.17847,-0.0211 0.2589,-0.031 -7.9e-4,-0.11845 -0.002,-0.22175 -0.003,-0.34675 z M 247.61,139.31866 c -0.001,2.7e-4 -0.002,8e-4 -0.004,0.001 -1.8e-4,0.002 -2.7e-4,0.003 -5.3e-4,0.005 0.001,-0.002 0.003,-0.004 0.004,-0.006 z m -72.65809,25.28011 c -0.10189,0.0653 -0.20426,0.12875 -0.30644,0.19327 -0.0952,0.19337 -0.18992,0.38717 -0.28681,0.57929 0.15166,-0.17493 0.30221,-0.3339 0.45166,-0.47387 0.0472,-0.0995 0.0943,-0.19919 0.14159,-0.29869 z m 19.9285,8.09512 c -0.0888,0.22767 -0.14312,0.44956 -0.0982,0.32091 0.0365,-0.10442 0.0683,-0.21197 0.0982,-0.32091 z M 175.0904,192.8849 c -2.38438,1.19851 -4.67876,2.35053 -6.2885,3.1564 -0.15717,0.34981 -0.31418,0.69971 -0.47129,1.04955 0.0851,-0.0287 0.16937,-0.0599 0.25476,-0.0879 0.0635,-0.0208 4.0435,-1.2776 6.52622,-1.07022 -0.008,-1.01593 -0.0143,-2.03196 -0.0212,-3.04788 z m -0.23461,10.48463 c 10e-4,-0.005 -0.0289,8e-4 -0.0987,0.0217 -0.49106,0.14688 -1.00151,0.21617 -1.51257,0.28215 0.5199,0.11971 1.60362,-0.2747 1.61127,-0.30386 z m 0.30851,0.0357 c -0.2042,0.45646 -0.39117,0.91378 -0.53692,1.37459 -3.3617,1.58937 -6.77095,3.07722 -10.19834,4.52634 0.49919,2.06405 -1.29992,3.90487 -3.85972,5.36195 -0.99753,2.34236 -1.97232,4.69441 -2.93315,7.05228 3.25488,-1.04858 6.2075,-1.95939 10.86652,-3.41478 0.96615,-0.13709 2.30728,-1.14133 2.97708,-0.59325 1.06464,-1.57115 2.12046,-3.15175 3.30109,-4.63589 -0.0389,-0.2862 -0.0672,-0.56958 -0.0884,-0.84542 -0.0938,-1.22229 0.31499,-2.4596 0.50436,-3.65456 -0.008,-1.72373 -0.0207,-3.44749 -0.0325,-5.17126 z m -13.7604,30.67771 c -0.0746,0.0253 -0.11065,0.0377 -0.18552,0.0631 -0.7616,0.34057 -1.65644,0.73833 -2.23914,1.00149 -0.17672,0.32409 -0.36442,0.66099 -0.56327,1.01182 -0.59338,1.04688 -2.04535,1.26281 -3.04736,1.93528 0.52215,-0.0961 1.03433,-0.18878 1.5074,-0.27491 0.87785,-0.0195 1.60799,-0.0707 2.1854,-0.007 0.60613,-0.17444 1.21398,-0.33486 1.82417,-0.47905 -0.10871,-0.55662 -0.22508,-1.11034 -0.37103,-1.65158 0.34529,-0.61758 0.5936,-1.06711 0.88935,-1.59938 z m 3.07578,2.34663 c -0.10154,-0.008 -0.34289,0.14175 -0.53175,0.31057 0.32544,-0.0957 0.63874,-0.18861 0.93017,-0.2713 -0.13266,-0.0148 -0.2653,-0.0284 -0.39842,-0.0393 z" />
    <g
       id="g1164-2"
       transform="rotate(180,148.74243,150.79775)"
       style="fill:#000080">
      <path
         id="path935-7"
         style="opacity:0.995525;fill:url(#linearGradient1226);fill-opacity:1;stroke:#32daff;stroke-width:0.999999;stroke-opacity:0"
         transform="scale(0.26458333)"
         d="m 719.33398,29.375 c -0.0453,1.254915 -0.16908,2.545644 -0.4121,3.880859 -0.44438,3.343178 -0.62708,6.770938 0.43554,10.021485 6.32496,0.785303 13.56077,2.32529 18.125,2.52539 1.62705,0.07133 2.57839,2.107662 3.38672,3.521485 2.69998,4.722342 5.29603,9.569127 7.04297,14.720703 0.57755,1.702894 0.38189,3.55084 0.31055,5.375 1.29288,0.98188 2.62428,2.118341 3.93164,3.355469 1.12122,-0.0052 2.24135,0.02688 3.36132,0.09766 -0.47156,-1.244941 -0.48467,-2.325449 0.5586,-3.023438 1.55245,-1.038653 2.39843,1.038796 3.15625,3.480469 1.13169,0.632181 2.11393,3.396756 2.93164,6.982422 2.56428,4.57721 5.03422,9.209186 7.74414,13.701172 4.05628,6.723734 7.04469,11.401834 9.5625,15.300774 0.39294,-0.0761 0.79857,-0.20724 1.13477,-0.0273 2.63028,1.4076 4.97546,3.29616 7.51757,4.85742 1.0012,0.6149 -1.92703,-1.34527 -2.89062,-2.01758 8.51966,3.7885 13.05441,12.64584 20.22265,18.01758 0.64748,0.48529 1.66333,-0.25349 2.42774,0.0117 6.97531,2.42001 13.54215,5.88718 20.30664,8.8457 11.74341,8.64559 23.24227,18.60611 32.25391,30.21094 8.19972,11.97837 3.94305,6.25562 12.7207,17.20313 14.34482,15.93043 -1.80101,-2.66813 16.18164,21.35546 4.56435,6.09765 10.21761,11.32196 14.86133,17.35938 6.29348,8.18234 8.88615,13.02442 14.23437,21.85742 1.45043,3.26552 9.80533,22.40106 12.03321,26.25195 1.66065,2.87049 4.12753,5.2103 5.88672,8.02149 2.13833,3.41705 3.71945,7.15616 5.77929,10.62109 12.34598,20.76774 -5.84823,-12.42292 7.41602,12.22657 5.19813,4.63635 7.30897,11.56381 10.39258,17.54687 0.71482,1.38695 1.97114,2.50299 2.44921,3.98828 4.01855,12.48521 4.70377,19.1208 6.76758,31.57617 3.05594,19.45111 10.91699,37.89065 10.74805,57.83008 -0.0324,3.82466 -1.48556,14.41209 -2.02539,18.62891 -0.71736,17.41375 -0.71132,34.84738 -0.37305,52.26953 0.14332,7.37726 1.27741,14.28562 -2.70508,21.32226 -2.79518,4.9389 -7.55978,8.46638 -11.33984,12.69922 -4.79564,4.15726 -9.20579,8.67242 -13.36523,13.41211 -0.98,7.24136 -2.60468,13.77508 -5.99219,20.67188 -1.31962,2.68664 -3.30066,5.00913 -4.66016,7.67578 -23.2159,45.53824 10.73532,-16.4509 -19.04883,36.90234 -8.94209,13.91932 -10.77747,19.30859 -24.13867,29.78321 -10.97727,8.60577 -23.89108,13.2757 -37.00976,17.50195 -2.90564,5.25348 -5.93607,10.44294 -9.33985,15.4707 -3.06485,2.72481 -5.90671,5.7257 -9.19531,8.17578 -3.86426,2.87891 -13.15144,8.00353 -17.83008,9.2168 -6.97572,1.80881 -14.39957,0.938 -7.78906,1.55859 0.91287,0.39217 3.23158,0.31338 2.73828,1.17578 -2.19424,3.8363 -5.74153,6.74752 -8.98633,9.74805 -8.36356,7.73401 -18.87134,15.16084 -30.55468,16.70508 -3.55163,0.46942 -7.1572,0.31146 -10.73633,0.4668 -9.85474,-2.29289 -19.59707,-1.52031 -29.59766,-1.31055 -9.90076,0.0756 -23.57297,0.52702 -32.76758,-5.63281 -2.78893,9.04318 -5.22589,17.24926 -7.07031,23.96289 -0.006,0.0207 -0.0119,0.0636 -0.0176,0.0859 0.28797,0.68284 0.58746,1.35437 0.91797,2.0039 0.002,4.02519 -0.005,8.051 -0.004,12.07617 0.29213,1.13623 0.56515,2.2776 0.79493,3.42383 0.96257,4.80129 -0.0521,27.73467 -0.23243,33.19922 -0.25635,2.26593 -0.43007,4.21159 -0.54492,5.96094 0.008,2.86135 0.008,5.72262 0.0234,8.58398 0.008,1.52587 1.53525,4.33208 0.0293,4.57813 -0.0117,0.002 -0.0234,0.004 -0.0352,0.006 0.008,0.20139 0.0139,0.36597 0.0215,0.57226 -1.31728,-0.0227 -2.63623,-0.0232 -3.95507,-0.0234 -8.72761,1.06009 -17.5704,1.03763 -26.39649,1.17187 -2.32874,0.96378 -4.70286,1.36321 -7.10547,0.67773 -0.51144,-0.14591 -0.9933,-0.29394 -1.48047,-0.4414 -0.48148,0.0204 -0.9642,0.0306 -1.44531,0.0547 -0.006,-0.17029 -0.008,-0.33956 -0.0137,-0.50977 -1.55351,-0.5004 -2.95962,-1.01142 -4.25976,-1.53125 -0.0155,1.14767 -0.0249,2.29571 -0.043,3.44336 -0.0179,0.10489 -0.23608,1.24435 -0.38868,2.06641 0.009,0.011 0.02,0.0201 0.0293,0.0312 5.03955,6.03666 0.40642,15.72287 0.60938,23.58398 -1.96257,0.501 -3.92086,1.33314 -5.87891,2.14844 -5.0909,6.33659 -9.58653,13.13318 -14.17383,19.84375 -15.08461,22.06675 -21.82499,33.04047 -35.55273,54.68359 1.83289,3.47932 2.11445,10.56426 0.71289,23.80274 -0.14285,1.34924 -3.7081,2.45731 -7.85156,3.06445 -0.29569,0.14974 -0.2339,0.11574 -0.54883,0.27539 -1.23999,0.22673 -2.46779,0.54136 -3.72071,0.67969 -0.63549,0.0699 -1.29128,-0.18338 -1.91796,-0.0566 -5.48806,1.10864 -10.87538,2.57158 -16.18165,4.29296 -0.0113,0.31135 -0.0163,0.62278 -0.0352,0.9336 -0.18025,2.98269 -5.4779,2.39523 -8.28125,3.42969 -25.23095,9.31048 -5.25757,0.39381 -31.48633,13.24023 -5.01305,2.67689 -9.95492,5.44099 -14.86914,8.21289 1.21715,2.78226 2.1221,6.22092 3.01563,10.1582 0.0569,0.25055 -0.69508,8.33848 -0.78126,9.28321 -0.32733,6.29537 0.0997,12.59796 0.10352,18.89844 -0.0718,5.64747 -0.0582,11.29567 -0.0469,16.94337 0.007,6.1839 0,12.3689 0,18.5528 -8e-5,9.9417 7.1e-4,19.8825 0,29.8242 -8e-5,13.2216 0,26.4424 0,39.6641 v 22.0351 28.791 a 547.14274,574.28561 0 0 0 51.4375,2.5449 A 547.14274,574.28561 0 0 0 1115.7148,581.42773 547.14274,574.28561 0 0 0 719.33398,29.375 Z m 3.5586,21.201172 c 0.59215,1.146849 1.14697,2.308755 1.59765,3.496094 0.50953,0.04778 1.02078,0.0886 1.5293,0.140625 -1.08019,-1.423898 -2.12124,-2.623593 -3.12695,-3.636719 z M 355.77539,157.13281 c -0.0134,0.0969 -0.0237,0.17424 -0.0371,0.27149 -0.003,0.14974 -0.007,0.29947 -0.01,0.44922 0.0154,-0.24025 0.0315,-0.48046 0.0469,-0.72071 z m 100.33008,156.42578 c -0.0653,0.79493 -0.12999,1.58985 -0.19531,2.38477 0.15957,-0.76496 0.31853,-1.53005 0.47851,-2.29492 -0.0962,-0.032 -0.18743,-0.0584 -0.2832,-0.0899 z m -22.54102,100.35352 c 0.15926,0.17217 0.31861,0.34284 0.4668,0.5293 0.56432,0.71005 1.01333,1.45278 1.38281,2.21679 0.1132,-0.74009 0.22784,-1.48154 0.34375,-2.24414 -0.69581,-0.1431 -1.41098,-0.29987 -2.19336,-0.50195 z m -39.26953,15.94141 c -0.10544,0.59483 -0.20717,1.1903 -0.3125,1.78515 0.13982,0.0656 0.27599,0.1353 0.41406,0.20313 -0.0344,-0.67233 -0.0702,-1.37458 -0.10156,-1.98828 z m 278.625,43.46875 c -0.27636,0.2362 -0.53107,0.42106 -0.79297,0.62304 -0.0617,0.27896 -0.1143,0.52672 -0.17578,0.80469 0.31235,-0.0381 0.67453,-0.0798 0.97852,-0.11719 -0.003,-0.44768 -0.007,-0.83808 -0.01,-1.31054 z m 226.96289,59.01953 c -0.005,10e-4 -0.009,0.003 -0.0137,0.004 -6.9e-4,0.006 -10e-4,0.0116 -0.002,0.0176 0.005,-0.007 0.0104,-0.0143 0.0156,-0.0215 z m -274.61328,95.54687 c -0.38509,0.24681 -0.77199,0.4866 -1.1582,0.73047 -0.35986,0.73085 -0.71781,1.46333 -1.08399,2.18945 0.57321,-0.66118 1.1422,-1.26198 1.70704,-1.79101 0.17861,-0.37614 0.35627,-0.75287 0.53515,-1.12891 z m 75.32031,30.59571 c -0.33578,0.86048 -0.54092,1.69913 -0.37109,1.21289 0.13784,-0.39465 0.25809,-0.80113 0.37109,-1.21289 z m -561.72265,72.19921 c -0.0689,0.0785 -0.13891,0.15872 -0.20703,0.23633 -0.13729,0.9705 -0.2748,1.9314 -0.41211,2.90235 0.20214,-1.02716 0.41701,-2.11044 0.61914,-3.13868 z m 486.92578,4.11329 c -9.01183,4.52981 -17.68349,8.8839 -23.76758,11.92968 -0.59402,1.32213 -1.18743,2.64458 -1.78125,3.9668 0.32172,-0.10857 0.64015,-0.22627 0.96289,-0.33203 0.23988,-0.0786 15.28252,-4.82871 24.66602,-4.04492 -0.0287,-3.83974 -0.0542,-7.67982 -0.0801,-11.51953 z m -0.88672,39.62695 c 0.005,-0.0188 -0.10917,0.003 -0.37305,0.082 -1.85596,0.55514 -3.78524,0.81702 -5.71679,1.06641 1.96497,0.45243 6.06094,-1.03825 6.08984,-1.14844 z m 1.16602,0.13476 c -0.77177,1.7252 -1.47842,3.45366 -2.0293,5.19532 -12.70565,6.00707 -25.59101,11.63044 -38.54492,17.10742 1.88672,7.80112 -4.91309,14.75858 -14.58789,20.26562 -3.77021,8.85303 -7.45446,17.74268 -11.08594,26.6543 12.3019,-3.96312 23.46143,-7.40555 41.07031,-12.90625 3.65159,-0.51812 8.72043,-4.31368 11.25195,-2.24219 4.02383,-5.93822 8.01435,-11.91216 12.47657,-17.52148 -0.14712,-1.08173 -0.25402,-2.15277 -0.33399,-3.19531 -0.35437,-4.61965 1.19049,-9.29612 1.90625,-13.8125 -0.0293,-6.51489 -0.0782,-13.0299 -0.12304,-19.54493 z m -130.90625,10.60157 c 0.13287,0.29371 0.26766,0.56337 0.39843,0.90039 0.52235,-0.0588 0.97477,-0.0728 1.38672,-0.0586 -0.0501,-0.13767 -0.10022,-0.30034 -0.15039,-0.43554 -0.58909,-0.12778 -1.11264,-0.26694 -1.63476,-0.40625 z m -57.26758,88.42578 c -0.2127,0.0261 -0.41978,0.034 -0.63086,0.0547 0.20232,1.10299 0.41833,2.2626 0.62304,3.37696 -9.7e-4,-1.13905 0.007,-2.29333 0.008,-3.43164 z m 136.16601,16.91992 c -0.28206,0.0955 -0.41821,0.14246 -0.70117,0.23828 -2.87849,1.28719 -6.26057,2.79054 -8.46289,3.78516 -0.66793,1.22492 -1.37733,2.49824 -2.12891,3.82422 -2.24268,3.9567 -7.73043,4.77282 -11.51757,7.31445 1.9735,-0.36317 3.90928,-0.71351 5.69726,-1.03906 3.31786,-0.0736 6.07744,-0.26733 8.25977,-0.0254 2.2909,-0.65928 4.58829,-1.26558 6.89453,-1.81055 -0.41088,-2.10377 -0.85072,-4.19658 -1.40235,-6.24219 1.30505,-2.33417 2.24353,-4.03318 3.36133,-6.04492 z m 11.625,8.86914 c -0.38377,-0.0315 -1.29597,0.53577 -2.00976,1.17383 1.23003,-0.36165 2.41415,-0.71287 3.51562,-1.02539 -0.5014,-0.0561 -1.00271,-0.10721 -1.50586,-0.14844 z" />
    </g>
    <path
       d="m 107.18956,294.69422 c -0.0682,-0.58813 -0.0418,-1.22519 0.0806,-1.89756 0.11758,-0.88455 0.16592,-1.79148 -0.11524,-2.65152 -1.67348,-0.20778 -3.58795,-0.61523 -4.79557,-0.66817 -0.43049,-0.0189 -0.68219,-0.55766 -0.89607,-0.93173 -0.71436,-1.24945 -1.40124,-2.53183 -1.863446,-3.89485 -0.15281,-0.45056 -0.10104,-0.9395 -0.0822,-1.42214 -0.34208,-0.25979 -0.69434,-0.56048 -1.04025,-0.8878 -0.29666,0.001 -0.59302,-0.007 -0.88935,-0.0258 0.12477,0.32939 0.12824,0.61528 -0.1478,0.79995 -0.41075,0.27481 -0.63458,-0.27485 -0.83509,-0.92087 -0.29942,-0.16727 -0.55931,-0.89873 -0.77566,-1.84743 -0.67847,-1.21106 -1.33197,-2.4366 -2.04897,-3.62511 -1.07322,-1.77898 -1.86391,-3.01673 -2.53008,-4.04833 -0.10396,0.0201 -0.21129,0.0548 -0.30024,0.007 -0.69593,-0.37242 -1.31642,-0.87211 -1.98902,-1.28519 -0.2649,-0.16269 0.50986,0.35594 0.76481,0.53382 -2.25416,-1.00237 -3.45398,-3.34588 -5.35058,-4.76715 -0.17131,-0.1284 -0.44009,0.0671 -0.64234,-0.003 -1.84555,-0.6403 -3.58303,-1.55765 -5.3728,-2.34043 -3.10711,-2.28748 -6.14952,-4.92286 -8.53384,-7.99331 -2.16951,-3.16927 -1.04327,-1.65513 -3.36569,-4.55166 -3.7954,-4.21493 0.47652,0.70594 -4.28139,-5.6503 -1.20765,-1.61334 -2.70341,-2.99561 -3.93206,-4.59301 -1.66515,-2.16491 -2.35113,-3.44605 -3.76618,-5.78311 -0.38376,-0.864 -2.59433,-5.92695 -3.18379,-6.94583 -0.43938,-0.75948 -1.09207,-1.37856 -1.55752,-2.12235 -0.56577,-0.9041 -0.98411,-1.8934 -1.52911,-2.81016 -3.26654,-5.4948 1.54735,3.28689 -1.96215,-3.23495 -1.37534,-1.2267 -1.93384,-3.05959 -2.74971,-4.64261 -0.18913,-0.36696 -0.52153,-0.66225 -0.64802,-1.05523 -1.06324,-3.30338 -1.24454,-5.05905 -1.79059,-8.35453 -0.80855,-5.14644 -2.88845,-10.02524 -2.84375,-15.30088 0.009,-1.01194 0.39305,-3.8132 0.53588,-4.9289 0.18981,-4.60738 0.18821,-9.22003 0.0987,-13.82964 -0.0379,-1.9519 -0.33799,-3.77974 0.71572,-5.64152 0.73955,-1.30675 2.00019,-2.24006 3.00033,-3.36 1.26884,-1.09994 2.4357,-2.29458 3.53622,-3.54862 0.25929,-1.91594 0.68915,-3.64466 1.58543,-5.46943 0.34915,-0.71084 0.8733,-1.32534 1.233,-2.03089 6.14254,-12.04866 -2.84039,4.35264 5.04,-9.76374 2.36593,-3.68282 2.85154,-5.10873 6.38669,-7.88014 2.9044,-2.27695 6.32118,-3.51253 9.79217,-4.63073 0.76878,-1.38998 1.57058,-2.76303 2.47117,-4.09329 0.8109,-0.72094 1.56281,-1.51492 2.43292,-2.16317 1.02242,-0.76171 3.47965,-2.1176 4.71754,-2.43861 1.84566,-0.47858 3.80989,-0.24818 2.06086,-0.41238 -0.24153,-0.10376 -0.85502,-0.0829 -0.7245,-0.31109 0.58056,-1.01502 1.51911,-1.78528 2.37763,-2.57917 2.21286,-2.04629 4.99304,-4.01131 8.08426,-4.41989 0.9397,-0.1242 1.89367,-0.0824 2.84065,-0.12351 2.6074,0.60666 5.18506,0.40225 7.831046,0.34675 2.61957,-0.02 6.23701,-0.13944 8.66975,1.49035 0.73791,-2.39267 1.38269,-4.56387 1.87069,-6.34018 0.002,-0.005 0.003,-0.0168 0.005,-0.0227 -0.0762,-0.18067 -0.15543,-0.35834 -0.24288,-0.5302 -5.3e-4,-1.065 0.001,-2.13016 0.001,-3.19515 -0.0773,-0.30063 -0.14953,-0.60262 -0.21033,-0.90589 -0.25468,-1.27034 0.0138,-7.338133 0.0615,-8.783963 0.0678,-0.59953 0.11379,-1.11432 0.14418,-1.57716 -0.002,-0.75707 -0.002,-1.51411 -0.006,-2.27118 -0.002,-0.40372 -0.4062,-1.1462 -0.008,-1.2113 0.003,-5.3e-4 0.006,-10e-4 0.009,-0.002 -0.002,-0.0533 -0.004,-0.0968 -0.006,-0.15141 0.34853,0.006 0.6975,0.006 1.04645,0.006 2.30918,-0.28048 4.64883,-0.27454 6.98407,-0.31005 0.61614,-0.255 1.2443,-0.36069 1.87999,-0.17932 0.13532,0.0386 0.26281,0.0778 0.3917,0.11679 0.1274,-0.005 0.25512,-0.008 0.38241,-0.0145 0.002,0.0451 0.002,0.0899 0.004,0.13488 0.41103,0.1324 0.78307,0.26761 1.12706,0.40514 0.004,-0.30365 0.007,-0.6074 0.0114,-0.91105 0.005,-0.0277 0.0625,-0.32924 0.10284,-0.54674 -0.002,-0.003 -0.005,-0.005 -0.008,-0.008 -1.33338,-1.5972 -0.10753,-4.16001 -0.16123,-6.23993 0.51926,-0.13256 1.03739,-0.35273 1.55546,-0.56844 1.34697,-1.67656 2.53643,-3.47482 3.75016,-5.25033 3.99113,-5.83849 5.77453,-8.74196 9.40666,-14.46837 -0.48495,-0.92057 -0.55945,-2.79512 -0.18862,-6.2978 0.0378,-0.35699 0.9811,-0.65017 2.07739,-0.81081 0.0782,-0.0396 0.0619,-0.0306 0.14521,-0.0729 0.32808,-0.06 0.65294,-0.14323 0.98444,-0.17983 0.16814,-0.0185 0.34165,0.0485 0.50746,0.015 1.45205,-0.29333 2.87744,-0.6804 4.28139,-1.13584 0.003,-0.0824 0.004,-0.16478 0.009,-0.24702 0.0477,-0.78917 1.44937,-0.63374 2.19108,-0.90744 6.67569,-2.4634 1.39107,-0.10419 8.33076,-3.50314 1.32616,-0.70815 2.63359,-1.4392 3.93361,-2.17248 -0.32202,-0.73596 -0.561,-1.64666 -0.79737,-2.6882 -0.0151,-0.0663 0.18391,-2.20622 0.20671,-2.45618 0.0579,-1.11411 0.0266,-2.2289 -10e-4,-3.34398 a 118.30652,131.15772 0 0 0 -22.31634,-2.35442 118.30652,131.15772 0 0 0 -118.307,131.157883 118.30652,131.15772 0 0 0 87.13939,126.52407 z m -0.96997,-6.48023 c -0.15667,-0.30343 -0.30347,-0.61085 -0.42271,-0.925 -0.13481,-0.0126 -0.27008,-0.0234 -0.40463,-0.0372 0.2858,0.37674 0.56125,0.69416 0.82734,0.96221 z m 97.13309,-28.19311 c 0.004,-0.0256 0.006,-0.0461 0.01,-0.0718 8e-4,-0.0396 0.002,-0.0792 0.003,-0.11885 -0.004,0.0636 -0.008,0.12712 -0.0124,0.19069 z m -10.19162,-72.15736 c 0.0279,-0.15738 0.0551,-0.31488 0.0827,-0.47232 -0.037,-0.0174 -0.073,-0.0358 -0.10956,-0.0537 0.009,0.17789 0.0186,0.3637 0.0269,0.52607 z m -73.71953,-11.50111 c 0.0731,-0.0625 0.14051,-0.1114 0.2098,-0.16484 0.0163,-0.0738 0.0302,-0.13936 0.0465,-0.21291 -0.0826,0.0101 -0.17847,0.0211 -0.2589,0.031 8e-4,0.11845 0.002,0.22174 0.003,0.34674 z M 59.390934,160.74683 c 10e-4,-2.7e-4 0.002,-7.9e-4 0.004,-10e-4 1.9e-4,-0.002 2.7e-4,-0.003 5.3e-4,-0.005 -10e-4,0.002 -0.003,0.004 -0.004,0.006 z m 72.658086,-25.28011 c 0.10189,-0.0653 0.20426,-0.12875 0.30644,-0.19327 0.0952,-0.19337 0.18993,-0.38717 0.28681,-0.57929 -0.15166,0.17494 -0.30221,0.3339 -0.45165,0.47387 -0.0473,0.0995 -0.0943,0.1992 -0.1416,0.29869 z m -19.92849,-8.09511 c 0.0888,-0.22767 0.14311,-0.44957 0.0982,-0.32092 -0.0365,0.10442 -0.0683,0.21197 -0.0982,0.32092 z m 19.79,-20.19102 c 2.38438,-1.19851 4.67876,-2.35053 6.28851,-3.15639 0.15716,-0.34982 0.31417,-0.69972 0.47129,-1.04955 -0.0851,0.0287 -0.16938,0.0599 -0.25477,0.0878 -0.0635,0.0208 -4.0435,1.27759 -6.52622,1.07021 0.008,1.01594 0.0143,2.03196 0.0212,3.04788 z m 0.23461,-10.484633 c -0.001,0.005 0.0289,-7.9e-4 0.0987,-0.0217 0.49106,-0.14688 1.00151,-0.21617 1.51257,-0.28215 -0.5199,-0.11971 -1.60362,0.2747 -1.61127,0.30386 z m -0.30851,-0.0357 c 0.2042,-0.45646 0.39117,-0.91378 0.53692,-1.37459 3.36171,-1.58937 6.77096,-3.07722 10.19835,-4.52634 -0.4992,-2.06405 1.29992,-3.90487 3.85971,-5.36194 0.99753,-2.34237 1.97232,-4.69442 2.93315,-7.05229 -3.25487,1.04858 -6.2075,1.95939 -10.86652,3.41478 -0.96615,0.13709 -2.30728,1.14133 -2.97708,0.59325 -1.06463,1.57115 -2.12046,3.15176 -3.30109,4.63589 0.0389,0.28621 0.0672,0.56959 0.0884,0.84542 0.0938,1.22229 -0.31498,2.4596 -0.50436,3.65456 0.008,1.72373 0.0207,3.4475 0.0325,5.17126 z m 13.76041,-30.67771 c 0.0746,-0.0253 0.11065,-0.0377 0.18551,-0.0631 0.7616,-0.34057 1.65645,-0.73833 2.23914,-1.00149 0.17673,-0.32409 0.36442,-0.66099 0.56328,-1.01182 0.59337,-1.04688 2.04534,-1.26281 3.04735,-1.93528 -0.52215,0.0961 -1.03433,0.18878 -1.5074,0.27491 -0.87785,0.0195 -1.60799,0.0707 -2.18539,0.007 -0.60614,0.17443 -1.21399,0.33485 -1.82418,0.47904 0.10871,0.55662 0.22509,1.11034 0.37104,1.65158 -0.3453,0.61758 -0.5936,1.06711 -0.88935,1.59938 z m -3.07579,-2.34663 c 0.10154,0.008 0.3429,-0.14175 0.53175,-0.31057 -0.32544,0.0957 -0.63874,0.18861 -0.93017,0.2713 0.13266,0.0148 0.2653,0.0284 0.39842,0.0393 z"
       style="opacity:0.995525;fill:#1a1a1a;fill-opacity:1;stroke:#32daff;stroke-width:0.264583;stroke-opacity:0"
       id="path952-3" />
    <path
       id="rect906"
       style="opacity:0.995525;fill:url(#linearGradient1234);fill-opacity:1;stroke:#32daff;stroke-width:0.264584;stroke-opacity:0"
       d="M 145.85029,-4.1874232 V 252.71095 c 0.0881,0.25933 0.17661,0.5148 0.26241,0.79311 0.0192,0.0626 -0.20294,1.83356 -0.26241,2.30937 v 4.51243 c 0.006,0.25731 0.0141,0.51479 0.0142,0.77208 -0.01,0.5435 -0.0111,1.0869 -0.0142,1.63046 v 39.50031 h 37.65607 V -4.1874232 Z" />
    <rect
       style="opacity:0.995525;fill:#00ffcc;fill-opacity:1;stroke:#32daff;stroke-width:0.264583;stroke-opacity:0"
       id="rect1252"
       width="73.335617"
       height="15.544363"
       x="51.9123"
       y="157.61276"
       ry="6.4144688"
       rx="6.4144688" />
  </g>
  <script
     id="mesh_polyfill"
     type="text/javascript">
!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();
</script>
</svg>
