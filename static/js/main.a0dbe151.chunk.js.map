{"version":3,"sources":["Components/FramerCards.js","Components/Card.js","Images/Sort/Selection.svg","Images/Home/List.svg","Images/List/Search.svg","Images/Global/waveL.svg","Images/Global/waveD.svg","Components/Home.js","App.js","serviceWorker.js","index.js"],"names":["framerContainer","hidden","visible","transition","when","staggerChildren","framerItem","y","opacity","duration","useStyles","makeStyles","theme","root","maxWidth","media","height","linkStyle","textDecoration","color","MediaCard","props","classes","className","to","link","image","imgUrl","title","gutterBottom","variant","component","intro","module","exports","Home","itemList","img","SortLogo","ListLogo","SearchLogo","map","item","index","Grid","key","div","variants","FramerFunc","Card","initial","animate","container","direction","justify","spacing","style","marginTop","Header","React","lazy","List","Sort","Search","AboutUs","Page","wave","position","zIndex","App","fallback","Hidden","lgUp","src","SvgD","alt","mdDown","SvgL","exact","path","Boolean","window","location","hostname","match","createMuiTheme","breakpoints","values","xs","sm","md","lg","xl","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a0dbe151.chunk.js","sourcesContent":["export default {\r\n    framerContainer : {\r\n                        hidden: {},\r\n                        visible: {\r\n                        transition: {\r\n                            when: \"beforeChildren\",\r\n                            staggerChildren: .05\r\n                        }\r\n                        }\r\n                      },\r\n        framerItem : {\r\n            hidden: { y: 40, opacity: 0 },\r\n            visible: { \r\n            y: 0,\r\n            opacity: 1,\r\n            transition: {\r\n                duration: .8\r\n            }\r\n            }\r\n        }\r\n    }\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {Link} from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles(theme=>({\r\n  root: {\r\n    maxWidth: 220\r\n  },\r\n  media: {\r\n    height: 140,\r\n  },\r\n  linkStyle:{\r\n      textDecoration: 'none',\r\n      color: 'black'\r\n  }\r\n}));\r\n\r\nexport default function MediaCard(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n      <Card className={classes.root}>\r\n        <CardActionArea>\r\n            <Link to={props.link} className={classes.linkStyle}>\r\n              <CardMedia\r\n              className={classes.media}\r\n              image={props.imgUrl}\r\n              title={props.title+' Algorithm'}\r\n              />\r\n              <CardContent>\r\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                  {(props.title === 'ListInsertion')?'Insertion':props.title}\r\n              </Typography>\r\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                  {props.intro}\r\n              </Typography>\r\n              </CardContent>\r\n          </Link>\r\n        </CardActionArea>\r\n      </Card>\r\n  );\r\n}","module.exports = __webpack_public_path__ + \"static/media/Selection.464d10a9.svg\";","module.exports = __webpack_public_path__ + \"static/media/List.0df1188b.svg\";","module.exports = __webpack_public_path__ + \"static/media/Search.7a0ba9ca.svg\";","module.exports = __webpack_public_path__ + \"static/media/waveL.051ff9d6.svg\";","module.exports = __webpack_public_path__ + \"static/media/waveD.6503bcf3.svg\";","import React from 'react';\r\nimport Card from './Card';\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { motion } from 'framer-motion'\r\nimport FramerFunc from './FramerCards'\r\nimport SortLogo from '../Images/Sort/Selection.svg'\r\nimport ListLogo from '../Images/Home/List.svg'\r\nimport SearchLogo from '../Images/List/Search.svg'\r\n\r\nexport default function Home(){\r\n    const Sorts = [{\r\n                        title:'Sort',\r\n                        img: SortLogo,\r\n                        intro: `Sorting algorithms puts elements of a list in a certain order.\r\n                        The most frequently orders ...`,//are lexicographical and numerical orders.\r\n                    },\r\n                    {\r\n                        title:'List',\r\n                        img: ListLogo,\r\n                        intro:`Linked list is an abstract data structure.Commonly perform \r\n                        operations like Insertion, Deletion ...`,\r\n                    },\r\n                    {\r\n                        title:'Coming soon',\r\n                        img: SearchLogo,\r\n                        intro:`Searching algorithms are use to search/find the element from a \r\n                        given list. The elements in the list ...`,\r\n                    }]\r\n\r\n    let itemList = Sorts.map((item, index)=>{\r\n        return(\r\n            <Grid item key={index} >\r\n                <motion.div variants={FramerFunc.framerItem}>\r\n                    <Card link={'/'+(item.title !== 'Coming soon' ? item.title : 'AlgorithmVisualizer')} \r\n                    title={item.title}\r\n                    intro={item.intro}\r\n                    imgUrl={item.img}/>\r\n                </motion.div>\r\n            </Grid>\r\n    )})\r\n\r\n    return(\r\n        <motion.div variants={FramerFunc.framerContainer}\r\n        initial='hidden'\r\n        animate='visible'>\r\n            <Grid \r\n            container\r\n            direction=\"row\"\r\n            justify=\"center\"\r\n            spacing={3}\r\n            style={{marginTop: '18vh'}}\r\n            >\r\n                {itemList}\r\n            </Grid>\r\n        </motion.div>\r\n    )}","import React, {Suspense} from 'react';\r\nimport Home from './Components/Home';\r\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\r\nimport Hidden from '@material-ui/core/Hidden'\r\n//\r\nimport SvgL from './Images/Global/waveL.svg'\r\nimport SvgD from './Images/Global/waveD.svg'\r\n\r\n//\r\nconst Header = React.lazy(()=>import('./Components/Header'));\r\nconst List = React.lazy(()=>import('./Components/LL'));\r\nconst Sort = React.lazy(()=>import('./Components/Sort'));\r\nconst Search = React.lazy(()=>import('./Components/Search'));\r\nconst AboutUs = React.lazy(()=>import('./Components/AboutUs'));\r\nconst Page = React.lazy(()=>import('./Components/Page'));\r\n//\r\n\r\n\r\n\r\nconst wave={\r\n    position: 'fixed',\r\n    zIndex: -1\r\n}\r\n//\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <div className=\"App\">\r\n        <Suspense fallback={<p>...</p>}>\r\n          <Header/>\r\n        </Suspense>\r\n        <Hidden lgUp>\r\n          <img src={SvgD} style={wave} alt='Default wave svg'/>\r\n        </Hidden>\r\n        <Hidden mdDown>\r\n          <img src={SvgL} style={wave} alt='Large wave svg'/>\r\n        </Hidden>\r\n        \r\n        <Route exact path='/AlgorithmVisualizer' component={Home} />\r\n        <Suspense fallback={<div>Loading...</div>}>\r\n          <Switch>\r\n            <Route path='/About' component={AboutUs} />\r\n            <Route path='/List/:AlgoId' component={Page} />\r\n            <Route path='/Sort/:AlgoId' component={Page} />\r\n            <Route path='/Search/:AlgoId' component={Page} />\r\n            <Route path='/List' component={List} />\r\n            <Route path='/Sort' component={Sort} />\r\n            <Route path='/Search' component={Search} />\r\n          </Switch>\r\n        </Suspense>\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\nimport ThemeProvider from '@material-ui/styles/ThemeProvider';\r\n\r\nconst theme = createMuiTheme({\r\n  breakpoints: {\r\n    values: {\r\n      xs: 0,\r\n      sm: 770,\r\n      md: 960,\r\n      lg: 1280,\r\n      xl: 1920,\r\n    },\r\n  },\r\n})\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ThemeProvider theme={theme}>\r\n      <App />\r\n    </ThemeProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}